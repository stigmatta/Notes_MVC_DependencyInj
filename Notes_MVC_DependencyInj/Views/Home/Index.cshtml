@model Notes_MVC_DependencyInj.Models.Note

@{
    ViewData["Title"] = "Index";
}

<h4>Existing Notes</h4>
@if (ViewBag.Notes != null && ViewBag.Notes.Count > 0)
{
    <ul class="list-group">
        @foreach (var note in ViewBag.Notes)
        {
            <li class="list-group-item">
                <strong>@note.Title</strong> - @note.Text
                <br />
                <small>Tags: @(note.Tags != null ? string.Join(", ", note.Tags) : "No tags")</small>
            </li>
        }
    </ul>
}
else
{
    <p>No notes available.</p>
}

<h4>Note</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Index">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Text" class="control-label"></label>
                <input asp-for="Text" class="form-control" />
                <span asp-validation-for="Text" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Tags" class="control-label">Tags (comma-separated)</label>
                <input asp-for="Tags" class="form-control" placeholder="e.g. work, important, ideas" />
                <span asp-validation-for="Tags" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
